function Initialize()

local measure = [=[

[AudioNUM]
Measure=Plugin
Plugin=AudioLevelBeta
Parent=Audio
Type=Band
]=]

local measureCalc = [=[
[CalcNUM]
Measure=Calc
]=]

local meter = [=[

[NUM]
Meter=Bar
MeasureName=]=]

local ms_calcGhost = [=[

[ms_calcGhostNUM]
Measure=Calc
Formula=[&lua_Ghost:GetValue( NUM )]
]=]

local mt_barGhost = [=[
[mt_barGhostNUM]
Meter=Bar
MeasureName=ms_calcGhostNUM
]=]

  if SKIN:GetVariable('MinBarHeight') ~= '0' and true or
    (SKIN:GetVariable('ModeKeyboard') ~= '0' and true or
  false) then
    
    if SKIN:GetVariable('ModeKeyboard') ~= '0' then
      formula = 'Formula=(Max(AudioNUM, 1))'
    else
      formula = 'Formula=(Max('..  0.00001 + (SKIN:GetVariable('MinBarHeight') / SKIN:GetVariable('BarHeight'))  ..', AudioNUM))'
    end

    template = measure..measureCalc..formula..meter..'CalcNUM'
  else
    template = measure..meter..'AudioNUM'
  end
	if SKIN:GetVariable( "bFXGhost" ) ~= "0" then
		template = template .. ms_calcGhost .. mt_barGhost
	end

  local index, section, gsub = 1, {}, string.gsub
  local lowerLimit, upperLimit = 1 + SELF:GetNumberOption('LowerLimit'), 1 + SELF:GetNumberOption('UpperLimit')
  for i = lowerLimit, upperLimit do
    section[index] = gsub(template,'NUM',i-1)
    index = index+1
  end

  local file = io.open(SKIN:ReplaceVariables(SELF:GetOption('WriteFile')), 'w')
  file:write(table.concat(section))
  file:close()
end